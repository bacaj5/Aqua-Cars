// <auto-generated />
using System;
using AquaCars.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AquaCars.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231219140416_addToDb")]
    partial class addToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AquaCars.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mercedes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lamborghini"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ferrari"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Citroen"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fiat"
                        });
                });

            modelBuilder.Entity("AquaCars.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaveAMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PickUpLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPay")
                        .HasColumnType("float");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("AquaCars.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "A4"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            Name = "Z5 f-11"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Name = "G4"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 8,
                            Name = "Y7 G8"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 10,
                            Name = "O990-W"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Name = "H22"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            Name = "55 F11-223"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 7,
                            Name = "AA FS"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            Name = "Crossover"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 9,
                            Name = "SUV"
                        });
                });

            modelBuilder.Entity("AquaCars.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KilometersPerHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.Property<int>("ProdYear")
                        .HasColumnType("int");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kjo makinë është një makinë hibride pioniere që është bërë sinonim i efikasitetit të karburantit dhe eko-miqësisë. Me dizajnin e tij dallues aerodinamik, Prius krenohet me ekonominë mbresëlënëse të karburantit, duke e bërë atë një zgjedhje të ndërgjegjshme për mjedisin. Teknologjia hibride kombinon pa probleme një motor benzine me një motor elektrik, duke ofruar një përvojë të qetë dhe efikase të drejtimit, së bashku me një brendshme praktike dhe komode.",
                            Engine = "Auto GTI",
                            KilometersPerHour = "220",
                            Model = "Mercedes",
                            PhotoFileName = "mercedes-offer.png",
                            PhotoFilePath = "/vehiclePhotos/mercedes-offer.png",
                            PricePerDay = 24.5,
                            ProdYear = 2022,
                            SeatingCapacity = 5,
                            SubCategoryId = 4,
                            SubCategoryName = "Y7 G8"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kjo makinë është një makinë hibride pioniere që është bërë sinonim i efikasitetit të karburantit dhe eko-miqësisë. Me dizajnin e tij dallues aerodinamik, Prius krenohet me ekonominë mbresëlënëse të karburantit, duke e bërë atë një zgjedhje të ndërgjegjshme për mjedisin. Teknologjia hibride kombinon pa probleme një motor benzine me një motor elektrik, duke ofruar një përvojë të qetë dhe efikase të drejtimit, së bashku me një brendshme praktike dhe komode.",
                            Engine = "Auto GTI+",
                            KilometersPerHour = "280",
                            Model = "Nissan",
                            PhotoFileName = "nissan-offer.png",
                            PhotoFilePath = "/vehiclePhotos/nissan-offer.png",
                            PricePerDay = 32.5,
                            ProdYear = 2023,
                            SeatingCapacity = 5,
                            SubCategoryId = 5,
                            SubCategoryName = "O990-W"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Makina Toyota F-Model është një makinë kompakte elegante dhe praktike që shquhet për efikasitetin e karburantit dhe shkathtësinë. Me dizajnin e saj sportiv dhe menaxhimin e shkathët, Civic Hatchback është një opsion argëtues për të vozitur për udhëtarët urban. Brenda, ai ofron një kabinë të dizajnuar mirë me karakteristika të teknologjisë moderne, duke e bërë atë një zgjedhje tërheqëse për ata që kërkojnë një përzierje të efikasitetit dhe komoditeteve moderne.",
                            Engine = "F-Model",
                            KilometersPerHour = "210",
                            Model = "Toyota",
                            PhotoFileName = "offer-toyota.png",
                            PhotoFilePath = "/vehiclePhotos/offer-toyota.png",
                            PricePerDay = 10.0,
                            ProdYear = 2002,
                            SeatingCapacity = 5,
                            SubCategoryId = 8,
                            SubCategoryName = "AA FS"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Makina Toyota DD331 është një makinë kompakte elegante dhe praktike që shquhet për efikasitetin e karburantit dhe shkathtësinë. Me dizajnin e saj sportiv dhe menaxhimin e shkathët, Civic Hatchback është një opsion argëtues për të vozitur për udhëtarët urban. Brenda, ai ofron një kabinë të dizajnuar mirë me karakteristika të teknologjisë moderne, duke e bërë atë një zgjedhje tërheqëse për ata që kërkojnë një përzierje të efikasitetit dhe komoditeteve moderne.",
                            Engine = "DD331",
                            KilometersPerHour = "290",
                            Model = "Toyota",
                            PhotoFileName = "toyota-offer-2.png",
                            PhotoFilePath = "/vehiclePhotos/toyota-offer-2.png",
                            PricePerDay = 24.5,
                            ProdYear = 2017,
                            SeatingCapacity = 2,
                            SubCategoryId = 9,
                            SubCategoryName = "Crossover"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "adminRoleId1293931239438254523",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "userRoleId23094852091092347944",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "adminuser123412903847192311234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6aa19a27-1427-4121-9975-f3063daa2fa6",
                            Email = "kbacaj5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KBACAJ5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPO4qU5MJvOYKCv0os7uW9VmnFS4yGJOVBelQpoKf8kvXZmNnUpxcvBaADQSWLpNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7aea4ca-9cdc-4f79-9a50-2b90b1c524cc",
                            TwoFactorEnabled = false,
                            UserName = "KajtazBacaj"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "adminuser123412903847192311234",
                            RoleId = "adminRoleId1293931239438254523"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AquaCars.Models.Reservation", b =>
                {
                    b.HasOne("AquaCars.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AquaCars.Models.SubCategory", b =>
                {
                    b.HasOne("AquaCars.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AquaCars.Models.Vehicle", b =>
                {
                    b.HasOne("AquaCars.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
